
CREATE TABLE bankdetails (
    accno INT,
    name VARCHAR2(15),
    balance INT,
    adate DATE
);


INSERT INTO bankdetails VALUES (1001, 'aby', 3005, TO_DATE('10-oct-15', 'DD-MON-YY'));
INSERT INTO bankdetails VALUES (1002, 'alan', 4000, TO_DATE('05-may-95', 'DD-MON-YY'));
INSERT INTO bankdetails VALUES (1003, 'amal', 5000, TO_DATE('16-mar-92', 'DD-MON-YY'));
INSERT INTO bankdetails VALUES (1004, 'jeffin', 3500, TO_DATE('01-apr-50', 'DD-MON-YY'));

CREATE TABLE banknew (
    accno INT,
    intr INT
);


DECLARE
    CURSOR temp IS SELECT accno, name, balance, adate FROM bankdetails;
    tempvar temp%ROWTYPE;
    intr INT;
BEGIN
    OPEN temp;
    LOOP
        FETCH temp INTO tempvar;
        EXIT WHEN temp%NOTFOUND;
        intr := 0.08 * tempvar.balance;
        INSERT INTO banknew VALUES (tempvar.accno, intr);
    END LOOP;
    CLOSE temp;
END;

select * from banknew;

--2) Create a table student (id, name, m1, m2, m3, grade). Insert 5 tuples into it. Find the total, calculate grade and update the grade in the table. 
CREATE TABLE student (
    id INT,
    name VARCHAR2(50),
    m1 INT,
    m2 INT,
    m3 INT,
    grade CHAR(1)
);

INSERT INTO student VALUES (1, 'Alice', 85, 90, 80, NULL);
INSERT INTO student VALUES (2, 'Bob', 70, 75, 65, NULL);
INSERT INTO student VALUES (3, 'Charlie', 95, 85, 90, NULL);
INSERT INTO student VALUES (4, 'Diana', 60, 55, 70, NULL);
INSERT INTO student VALUES (5, 'Eve', 80, 80, 75, NULL);


DECLARE
    CURSOR student_cursor IS SELECT id, m1, m2, m3 FROM student;
    tempvar student_cursor%ROWTYPE;
    total INT;
BEGIN
    OPEN student_cursor;
    LOOP
        FETCH student_cursor INTO tempvar;
        EXIT WHEN student_cursor%NOTFOUND;
        
        total := tempvar.m1 + tempvar.m2 + tempvar.m3;
        UPDATE student SET grade = 
            CASE 
                WHEN total >= 240 THEN 'A'
                WHEN total >= 180 THEN 'B'
                WHEN total >= 120 THEN 'C'
                ELSE 'D'
            END
        WHERE id = tempvar.id;
    END LOOP;
    CLOSE student_cursor;
END;

select * from student;

--3) Create table people_list (id, name, dt_joining, place). If personâ€™s experience is above 10 years, put the tuple in table exp_list (id, name, experience). 
CREATE TABLE people_list(
  id INT,
  name varchar2(50),
  dt_joining Date,
  place varchar2(50) 
);

INSERT INTO people_list VALUES (1, 'John', TO_DATE('01-JAN-2010', 'DD-MON-YYYY'), 'New York');
INSERT INTO people_list VALUES (2, 'Jane', TO_DATE('01-JAN-2015', 'DD-MON-YYYY'), 'Los Angeles');
INSERT INTO people_list VALUES (3, 'Doe', TO_DATE('01-JAN-2000', 'DD-MON-YYYY'), 'Chicago');

CREATE TABLE exp_list (
    id INT,
    name VARCHAR2(50),
    experience INT
);

DECLARE
    CURSOR people_cursor IS SELECT id, name, dt_joining FROM people_list;
    tempvar people_cursor%ROWTYPE;
    experience INT;
BEGIN
    OPEN people_cursor;
    LOOP
        FETCH people_cursor INTO tempvar;
        EXIT WHEN people_cursor%NOTFOUND;
        
        experience := TRUNC(MONTHS_BETWEEN(TO_DATE('10-21-2024', 'MM-DD-YYYY'), tempvar.dt_joining));
        
        IF experience >= 10 THEN
            INSERT INTO exp_list (id, name, experience) VALUES (tempvar.id, tempvar.name, experience);
        END IF;
    END LOOP;
    CLOSE people_cursor;
END;


SELECT * FROM exp_list;

--4)Create table employee_list (id, name, monthly salary).
CREATE TABLE employee_list (
    id INT,
    name VARCHAR2(50),
    monthly_salary INT
);

INSERT INTO employee_list VALUES (1, 'Alice', 5000);
INSERT INTO employee_list VALUES (2, 'Bob', 4000);
INSERT INTO employee_list VALUES (3, 'Charlie', 25000);
INSERT INTO employee_list VALUES (4, 'Diana', 70000);
INSERT INTO employee_list VALUES (5, 'Eve', 600000);

DECLARE
    CURSOR emp_cursor IS SELECT id, name, monthly_salary FROM employee_list;
    tempvar emp_cursor%ROWTYPE;
    new_salary INT;
BEGIN
    OPEN emp_cursor;
    LOOP
        FETCH emp_cursor INTO tempvar;
        EXIT WHEN emp_cursor%NOTFOUND;

        new_salary := tempvar.monthly_salary;

        IF new_salary * 12 < 60000 THEN
            new_salary := new_salary * 1.25;
        ELSIF new_salary * 12 BETWEEN 60000 AND 200000 THEN
            new_salary := new_salary * 1.20;
        ELSIF new_salary * 12 BETWEEN 200000 AND 500000 THEN
            new_salary := new_salary * 1.15;
        ELSE
            new_salary := new_salary * 1.10;
        END IF;

        UPDATE employee_list SET monthly_salary = new_salary WHERE id = tempvar.id;
    END LOOP;
    CLOSE emp_cursor;
END;

SELECT * FROM employee_list;

table BANKDETAILS created.
1 rows inserted.
1 rows inserted.
1 rows inserted.
1 rows inserted.
table BANKNEW created.
anonymous block completed
     ACCNO       INTR
---------- ----------
      1001        240 
      1002        320 
      1003        400 
      1004        280 

table STUDENT created.
1 rows inserted.
1 rows inserted.
1 rows inserted.
1 rows inserted.
1 rows inserted.
anonymous block completed
        ID NAME                                                       M1         M2         M3 GRADE
---------- -------------------------------------------------- ---------- ---------- ---------- -----
         1 Alice                                                      85         90         80 A     
         2 Bob                                                        70         75         65 B     
         3 Charlie                                                    95         85         90 A     
         4 Diana                                                      60         55         70 B     
         5 Eve                                                        80         80         75 B     

table PEOPLE_LIST created.
1 rows inserted.
1 rows inserted.
1 rows inserted.
table EXP_LIST created.
anonymous block completed
        ID NAME                                               EXPERIENCE
---------- -------------------------------------------------- ----------
         1 John                                                      177 
         2 Jane                                                      117 
         3 Doe                                                       297 

table EMPLOYEE_LIST created.
1 rows inserted.
1 rows inserted.
1 rows inserted.
1 rows inserted.
1 rows inserted.
anonymous block completed
        ID NAME                                               MONTHLY_SALARY
---------- -------------------------------------------------- --------------
         1 Alice                                                        6000 
         2 Bob                                                          5000 
         3 Charlie                                                     28750 
         4 Diana                                                       77000 
         5 Eve                                                        660000 

